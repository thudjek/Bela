@model Bela.Application.ViewModels.Game.GameViewModel;
@{
    ViewData["Title"] = "Belot.com.hr";
}
@section Styles
{
    <link rel="stylesheet" href="~/lib/sweetalert2/dist/sweetalert2.min.css" />
}
@section Scripts
{
    <environment include="Development">
        <script src="~/js/gameHub.js"></script>
    </environment>
    <environment exclude="Development">
        <script src="~/js/gameHub.min.js"></script>
    </environment>
    <script src="~/lib/sweetalert2/dist/sweetalert2.min.js"></script>
    <script>
        var currentRoundId = 0;
        var currentPhase = 0;
        var currentTrump = 0;
        var myTurn = false;
        var lockedPlayCard = false;
        var callArray = [];
        var roundRowsShowed = false;
        var timer = null;

        $(function () {
            getCurrentData();
        });

        function joinGameGroup() {
            var gameId = @Model.Id;
            gameHubConnection.invoke("JoinGameGroup", gameId);
        }

        function renderCardsInHand() {
            var allCards = currentPhase > 1;
            var isPlayable = currentPhase > 2;
            $("#handContainer").load("@Url.Action("GetCardsInHandViewComponent", "Game")?allCards=" + allCards + "&isPlayable=" + isPlayable + "&trump=" + currentTrump);
        }

        function getCurrentData() {
            $.get("@Url.Action("GetCurrentData", "Game", new { gameId = Model.Id })", function (data) {
                currentRoundId = data.currentRoundId;
                currentPhase = data.currentRoundPhase;
                renderRoundScores(data);
                renderTotalScores(data);
                renderCardsOnTable(data);

                if (currentPhase == 2)
                    renderCallSpeechBubbles(data);

                if (data.rounds.length > 0) {
                    data.rounds.forEach(function (item) {
                        addNewRoundRow(item);
                    });
                }

                renderSelectedTrump(data.selectedTrump, data.trumpSelectedBy);
                renderCurrentPlayerScreen(data.positionToPlay, data.remainingTime, data.isLast);
                renderDealerIcon(data.dealerPosition);
                renderCardsInHand();
            });
        }

        function getTotalScores() {
            $.get("@Url.Action("GetTotalScores", "Game", new { gameId = Model.Id })", function (data) {
                renderTotalScores(data.scores);

                if (data.rounds.length > 0) {
                    $(".round-row").remove();
                    data.rounds.forEach(function (item) {
                        addNewRoundRow(item);
                    });
                }
            });
        }

        function getRoundScores() {
            $.get("@Url.Action("GetRoundScores", "Game")?roundId=" + currentRoundId, function (scores) {
                renderRoundScores(scores);
            });
        }

        function addNewRoundRow(round) {
            var table = document.getElementById("scoreTable");
            var rowCount = table.rows.length;
            var row = table.insertRow(rowCount - 1);
            var cell1 = row.insertCell(0);
            cell1.innerHTML = round.number + ".";
            var cell1 = row.insertCell(1);
            cell1.innerHTML = round.score1;
            var cell1 = row.insertCell(2);
            cell1.innerHTML = round.score2;
            row.classList.add("round-row");
            if (!roundRowsShowed)
                $(row).attr("hidden", "hidden");
        }

        function setForStartOfNewRound() {
            callArray = [];
            resetRoundScores();
            resetTrump();
            getTotalScores();
            renderCardsInHand();
        }

        function resetCountdownProgressBars() {
            $("#progressDown").addClass("d-none");
            $("#progressUp").addClass("d-none");
            $("#progressRight").addClass("d-none");
            $("#progressLeft").addClass("d-none");
        }

        function resetSpeechBubbles() {
            $("#speechBubbleDown").text("");
            $("#speechBubbleUp").text("");
            $("#speechBubbleLeft").text("");
            $("#speechBubbleRight").text("");
        }

        function resetCallCards() {
            $("#callContainerUp").empty();
            $("#callContainerDown").empty();
            $("#callContainerLeft").empty();
            $("#callContainerRight").empty();
        }

        function resetRoundScores() {
            $("#miCalls").text(0);
            $("#viCalls").text(0);
            $("#miPoints").text(0);
            $("#viPoints").text(0);
            $("#miRoundTotal").text(0);
            $("#viRoundTotal").text(0);
        }

        function resetTable() {
            $("#cardUp").attr("src", "");
            $("#cardDown").attr("src", "");
            $("#cardLeft").attr("src", "");
            $("#cardRight").attr("src", "");
        }

        function resetTrump() {
            $("#selectedHearts").addClass("d-none");
            $("#selectedSpades").addClass("d-none");
            $("#selectedClubs").addClass("d-none");
            $("#selectedDiamonds").addClass("d-none");
            $("#trump-username").text("");
        }

        function resetDealer() {
            $("#playerUpDealerImg").addClass("d-none");
            $("#playerDownDealerImg").addClass("d-none");
            $("#playerLeftDealerImg").addClass("d-none");
            $("#playerRightDealerImg").addClass("d-none");
        }

        function renderRoundScores(data) {
            $("#miCalls").text(data.miCalls);
            $("#viCalls").text(data.viCalls);
            $("#miPoints").text(data.miPoints);
            $("#viPoints").text(data.viPoints);
            $("#miRoundTotal").text(data.miRoundTotal);
            $("#viRoundTotal").text(data.viRoundTotal);
        }

        function renderTotalScores(data) {
            $("#miTotalScore").text(data.miTotalScore);
            $("#viTotalScore").text(data.viTotalScore);
        }

        function renderSelectedTrump(trump, username) {
            if (trump != null && trump != 0 && username != null && username != "") {
                $("#trump-username").text(username);
                switch (trump) {
                    case 1:
                        $("#selectedHearts").removeClass("d-none");
                        break;
                    case 2:
                        $("#selectedSpades").removeClass("d-none");
                        break;
                    case 3:
                        $("#selectedDiamonds").removeClass("d-none");
                        break;
                    case 4:
                        $("#selectedClubs").removeClass("d-none");
                        break;
                }
                currentTrump = trump;
            }
        }

        function renderCardsOnTable(data) {
            $("#cardUp").attr("src", data.upCard);
            $("#cardDown").attr("src", data.downCard);
            $("#cardLeft").attr("src", data.leftCard);
            $("#cardRight").attr("src", data.rightCard);
        }

        function renderCallSpeechBubbles(data) {
            if (data.downCallValue != null && data.downCallValue != 0)
                $("#speechBubbleDown").text(data.downCallValue);

            if (data.upCallValue != null && data.upCallValue != 0)
                $("#speechBubbleUp").text(data.upCallValue);

            if (data.leftCallValue != null && data.leftCallValue != 0)
                $("#speechBubbleLeft").text(data.leftCallValue);

            if (data.rightCallValue != null && data.rightCallValue != 0)
                $("#speechBubbleRight").text(data.rightCallValue);
        }

        function renderPlayedCard(player, url) {
            switch (player) {
                case 1:
                    $("#cardDown").attr("src", url);
                    break;
                case 2:
                    $("#cardUp").attr("src", url);
                    break;
                case 3:
                    $("#cardRight").attr("src", url);
                    break;
                case 4:
                    $("#cardLeft").attr("src", url);
                    break;
            }
        }

        function renderDealerIcon(player) {
            resetDealer();
            switch (player) {
                case 1:
                    $("#playerDownDealerImg").removeClass("d-none");
                    break;
                case 2:
                    $("#playerUpDealerImg").removeClass("d-none");
                    break;
                case 3:
                    $("#playerRightDealerImg").removeClass("d-none");
                    break;
                case 4:
                    $("#playerLeftDealerImg").removeClass("d-none");
                    break;
            }
        }

        function animateCountdown(player, remainingTime) {
            var widthPercentage = (remainingTime / 15) * 100;
            resetCountdownProgressBars();
            if (timer != null)
                clearInterval(timer);
            switch (player) {
                case 1: {
                    var element = document.getElementById("progressDown");
                    var cloned = element.cloneNode(true);
                    if (remainingTime != 0) {
                        var timer = cloned.childNodes[1];
                        $(timer).css("width", widthPercentage + "%");
                        $(timer).css("animation", "roundtime " + remainingTime + "s linear forwards");
                    }
                    element.parentElement.replaceChild(cloned, element);
                    $("#progressDown").removeClass("d-none");
                    myTurn = true;
                    break;
                }
                case 2: {
                    var element = document.getElementById("progressUp");
                    var cloned = element.cloneNode(true);
                    if (remainingTime != 0) {
                        var timer = cloned.childNodes[1];
                        $(timer).css("width", widthPercentage + "%");
                        $(timer).css("animation", "roundtime " + remainingTime + "s linear forwards");
                    }
                    element.parentElement.replaceChild(cloned, element);
                    $("#progressUp").removeClass("d-none");
                    myTurn = false;
                    break;
                }
                case 3: {
                    var element = document.getElementById("progressRight");
                    var cloned = element.cloneNode(true);
                    if (remainingTime != 0) {
                        var timer = cloned.childNodes[1];
                        $(timer).css("width", widthPercentage + "%");
                        $(timer).css("animation", "roundtime " + remainingTime + "s linear forwards");
                    }
                    element.parentElement.replaceChild(cloned, element);
                    $("#progressRight").removeClass("d-none");
                    myTurn = false;
                    break;
                }
                case 4: {
                    var element = document.getElementById("progressLeft");
                    var cloned = element.cloneNode(true);
                    if (remainingTime != 0) {
                        var timer = cloned.childNodes[1];
                        $(timer).css("width", widthPercentage + "%");
                        $(timer).css("animation", "roundtime " + remainingTime + "s linear forwards");
                    }
                    element.parentElement.replaceChild(cloned, element);
                    $("#progressLeft").removeClass("d-none");
                    myTurn = false;
                    break;
                }
            }
        }

        function renderCurrentPlayerScreen(player, remainingTime, isLast = false) {
            animateCountdown(player, remainingTime);
            if (myTurn) {
                if (currentPhase == 1) {
                    swalHelper.showCallTrumpDialog(isLast);
                }
                else if (currentPhase == 2) {
                    swalHelper.showCallDialog();
                }
            }
        }

        function renderSpeechBubbleForCall(player, callValue) {
            switch (player) {
                case 1:
                    $("#speechBubbleDown").text(callValue);
                    break;
                case 2:
                    $("#speechBubbleUp").text(callValue);
                    break;
                case 3:
                    $("#speechBubbleRight").text(callValue);
                    break;
                case 4:
                    $("#speechBubbleLeft").text(callValue);
                    break;
            }
        }

        function selectTrump(trump, isLast) {
            Swal.close();
            $.post("@Url.Action("SelectTrump", "Game")", { roundId: currentRoundId, trump: trump, username: '@Model.UserNameDown', isLast: isLast }, function (data) {
                if (!data.success) {
                    swalHelper.alertErrorWithCallback(data.error, swalHelper.showCallTrumpDialog, 'gameContainer', isLast);
                }
            });
        }

        function makeACall(isCall) {
            Swal.close();
            $.post("@Url.Action("MakeACall", "Game")", { cardStrings: callArray, roundId: currentRoundId, isCall: isCall }, function (data) {
                if (!data.success) {
                    swalHelper.alertErrorWithCallback(data.error, swalHelper.showCallDialog, 'gameContainer');
                }
            });
        }

        function selectCard(element, isPlayed, askForBela) {
            var cardString = $(element).attr("data-card");
            if (isPlayed && myTurn) {
                if (!lockedPlayCard) {
                    if (askForBela && checkIfBothBelaCardsInHand(cardString)) {
                        lockedPlayCard = true;
                        swalHelper.showBelaDialog(cardString, playCard);
                    }
                    else {
                        if (!lockedPlayCard) {
                            playCard(cardString, false)
                        }
                        
                    }
                }
            }
            else {
                element.classList.toggle("card-selected");

                if (currentPhase == 2) {
                    if (element.classList.contains("card-selected")) {
                        callArray.push(cardString);
                    }
                    else {
                        removeFromArray(callArray, cardString);
                    }
                }
            }
        }

        function checkIfBothBelaCardsInHand(cardString) {
            var partnerCard = getPartnerCardForBela(cardString);
            if (partnerCard != "") {
                if ($("div[data-card='" + partnerCard + "']").length) {
                    return true;
                }
            }

            return false;
        }

        function getPartnerCardForBela(cardString) {
            var arr = cardString.split("");
            return arr[0] == "Q" ? "K" + arr[1] : arr[0] == "K" ? "Q" + arr[1] : "";
        }

        function playCard(cardString, belaCalled) {
            var arrCardsInHand = getCardsInHandArray();
            lockedPlayCard = true;
            $.post("@Url.Action("PlayACard", "Game")", { cardString: cardString, roundId: currentRoundId, position: @((int)Model.Position), cardsInHandStrings: arrCardsInHand, belaCalled: belaCalled }, function (data) {
                if (data.success) {
                    removeFromHand(cardString);
                    lockedPlayCard = false;
                }
                else {
                    swalHelper.alertMessageWithTimer(data.error, 500);
                    lockedPlayCard = false;
                }
            });
        }

        function getCardsInHandArray() {
            var cards = $(".card-in-hand");
            var arr = [];

            cards.each(function () {
                arr.push($(this).attr("data-card"));
            });

            return arr;
        }

        function getOnScreenPositionFromReturnedData(data, forPositionToPlay, forCall, forPlayedCard, forDealer) {
            switch (@((int)Model.Position)) {
                case 1:
                    return forPositionToPlay ? data.positionToPlayDown : forCall ? data.positionThatCalledDown : forPlayedCard ? data.positionThatPlayedCardDown : forDealer ? data.dealerPositionDown : 0;
                case 2:
                    return forPositionToPlay ? data.positionToPlayUp : forCall ? data.positionThatCalledUp : forPlayedCard ? data.positionThatPlayedCardUp : forDealer ? data.dealerPositionUp : 0;
                case 3:
                    return forPositionToPlay ? data.positionToPlayRight : forCall ? data.positionThatCalledRight : forPlayedCard ? data.positionThatPlayedCardRight : forDealer ? data.dealerPositionRight : 0;
                case 4:
                    return forPositionToPlay ? data.positionToPlayLeft : forCall ? data.positionThatCalledLeft : forPlayedCard ? data.positionThatPlayedCardLeft : forDealer ? data.dealerPositionLeft : 0;
            }
        }

        function showCallsOnTable(data) {
            var positionForShowing;
            switch (@((int)Model.Position)) {
                case 1:
                    positionForShowing = data.winningCallPositionDown;
                    break;
                case 2:
                    positionForShowing = data.winningCallPositionUp;
                    break;
                case 3:
                    positionForShowing = data.winningCallPositionRight;
                    break;
                case 4:
                    positionForShowing = data.winningCallPositionLeft;
                    break;
            }

            var url = "@Url.Action("GetCallOnTableViewComponent", "Game")?roundId=" + currentRoundId + "&playerPosition=" + data.winningCallPositionReal;
            switch (positionForShowing) {
                case 1:
                    $("#callContainerDown").load(url + "&isPartner=false");
                    $("#callContainerUp").load(url + "&isPartner=true");
                    break;
                case 2:
                    $("#callContainerUp").load(url + "&isPartner=false");
                    $("#callContainerDown").load(url + "&isPartner=true");
                    break;
                case 3:
                    $("#callContainerRight").load(url + "&isPartner=false");
                    $("#callContainerLeft").load(url + "&isPartner=true");
                    break;
                case 4:
                    $("#callContainerLeft").load(url + "&isPartner=false");
                    $("#callContainerRight").load(url + "&isPartner=true");
                    break;
                case 0:
                    swalHelper.alertMessageWithTimer("Nema zvanja", 2500);
                    break;
            }
        }

        function removeFromHand(cardString) {
            var element = $("div[data-card='" + cardString + "']");
            element.remove();
            var emptyDiv = "<div class='col m-1'></div>";
            $("#handContainer").append(emptyDiv);
        }

        function redirectToEndScreen() {
            var form = document.createElement("form");
            form.method = "POST";
            form.action = "/Game/EndScreen";
            document.body.appendChild(form);
            var elementGameId = document.createElement("input");
            elementGameId.name = "gameId";
            elementGameId.value = '@Model.Id';
            elementGameId.type = "hidden";
            form.appendChild(elementGameId);
            var elementMyUsername = document.createElement("input");
            elementMyUsername.name = "myUsername";
            elementMyUsername.value = '@Model.UserNameDown';
            elementMyUsername.type = "hidden";
            form.appendChild(elementMyUsername);
            var elementTeammateUsername = document.createElement("input");
            elementTeammateUsername.name = "teammateUsername";
            elementTeammateUsername.value = '@Model.UserNameUp';
            elementTeammateUsername.type = "hidden";
            form.appendChild(elementTeammateUsername);
            var elementOpponent1Username = document.createElement("input");
            elementOpponent1Username.name = "opponent1Username";
            elementOpponent1Username.value = '@Model.UserNameLeft';
            elementOpponent1Username.type = "hidden";
            form.appendChild(elementOpponent1Username);
            var elementOpponent2Username = document.createElement("input");
            elementOpponent2Username.name = "opponent2Username";
            elementOpponent2Username.value = '@Model.UserNameRight';
            elementOpponent2Username.type = "hidden";
            form.appendChild(elementOpponent2Username);
            form.submit();
        }

        function redirectToEndScreenQuit(quitUsername, opponent1Username, opponent2Username) {
            var form = document.createElement("form");
            form.method = "POST";
            form.action = "/Game/EndScreenQ";
            document.body.appendChild(form);
            var elementQuitUsername = document.createElement("input");
            elementQuitUsername.name = "quitUsername";
            elementQuitUsername.value = quitUsername;
            elementQuitUsername.type = "hidden";
            form.appendChild(elementQuitUsername);
            var elementOpponent1Username = document.createElement("input");
            elementOpponent1Username.name = "opponent1Username";
            elementOpponent1Username.value = opponent1Username;
            elementOpponent1Username.type = "hidden";
            form.appendChild(elementOpponent1Username);
            var elementOpponent2Username = document.createElement("input");
            elementOpponent2Username.name = "opponent2Username";
            elementOpponent2Username.value = opponent2Username;
            elementOpponent2Username.type = "hidden";
            form.appendChild(elementOpponent2Username);
            form.submit();
        }

        function leaveGame() {
            var gameId = @Model.Id;
            var quitUsername = '@Model.UserNameDown';
            var opponent1Username = '@Model.UserNameLeft'
            var opponent2Username = '@Model.UserNameRight'
            $.post("@Url.Action("LeaveGame", "Game")", { gameId: gameId, quitUsername: quitUsername, opponent1Username: opponent1Username, opponent2Username: opponent2Username }, function (data) {
                if (!data.success) {
                    swalHelper.alertError(data.error);
                }
            });
        }

        function toggleRoundRows() {
            roundRowsShowed = !roundRowsShowed;
            if (roundRowsShowed)
                $(".round-row").removeAttr("hidden");
            else
                $(".round-row").attr("hidden", "hidden");
        }

    </script>
}

<button onclick="swalHelper.showLeaveGameDialog(leaveGame)" class="btn btn-sm btn-primary">&times;</button>
<div id="gameContainer" class="game-container">
    <div class="row mb-2 justify-content-center">
        <div id="playerUp" class="col text-center">
            <div class="dealer-middle m-auto">
                <img id="playerUpDealerImg" class="d-none dealer-img" title="Djelitelj" src="~/imgs/d-icon.png" />
            </div>
            <span class="game-username">@Model.UserNameUp</span>
            <div id="progressUp" class="countdown-progress-bar countdown-progress-bar-tb d-none">
                <div></div>
            </div>
            <div id="speechBubbleUp" class="speech-bubble speech-bubble-up-down"></div>
        </div>
    </div>
    <div class="row align-items-center">
        <div id="playerLeft" class="col text-right">
            <div class="dealer ml-auto">
                <img id="playerLeftDealerImg" class="d-none dealer-img" title="Djelitelj" src="~/imgs/d-icon.png" />
            </div>
            <span class="game-username">@Model.UserNameLeft</span>
            <div id="progressLeft" class="countdown-progress-bar countdown-progress-bar-l d-none">
                <div></div>
            </div>
            <div id="speechBubbleLeft" class="speech-bubble speech-bubble-left"></div>
        </div>
        <div class="col-8 card-table">
            <div class="row card-row">
                <div class="col">
                    <img id="cardUp" class="card-img card-img-in-play" src="" />
                    <div id="callContainerUp" class="d-flex call-container">
                    </div>
                </div>
            </div>
            <div class="row card-row card-row-middle">
                <div class="col text-center position-relative">
                    <img id="cardLeft" class="card-img card-img-middle-row card-img-in-play" src="" />
                    <div id="callContainerLeft" class="d-flex call-container-middle-row call-container-left">
                    </div>
                </div>
                <div class="col text-center position-relative">
                    <img id="cardRight" class="card-img card-img-middle-row card-img-in-play" src="" />
                    <div id="callContainerRight" class="d-flex call-container-middle-row call-container-right">
                    </div>
                </div>
            </div>
            <div class="row card-row">
                <div class="col">
                    <img id="cardDown" class="card-img card-img-in-play" src="" />
                    <div id="callContainerDown" class="d-flex call-container">
                    </div>
                </div>
            </div>
            <div class="selected-trump">
                <img id="selectedHearts" class="d-none" src="~/imgs/suits/herc.png" />
                <img id="selectedSpades" class="d-none" src="~/imgs/suits/pik.png" />
                <img id="selectedClubs" class="d-none" src="~/imgs/suits/tref.png" />
                <img id="selectedDiamonds" class="d-none" src="~/imgs/suits/karo.png" />
                <span id="trump-username"></span>
            </div>
        </div>
        <div id="playerRight" class="col text-left">
            <div class="dealer mr-auto">
                <img id="playerRightDealerImg" class="d-none dealer-img" title="Djelitelj" src="~/imgs/d-icon.png" />
            </div>
            <span class="game-username">@Model.UserNameRight</span>
            <div id="progressRight" class="countdown-progress-bar countdown-progress-bar-r d-none">
                <div></div>
            </div>
            <div id="speechBubbleRight" class="speech-bubble speech-bubble-right"></div>
        </div>
    </div>
    <div class="row mt-2 justify-content-center">
        <div id="playerDown" class="col text-center game-username">
            <div class="dealer-middle m-auto">
                <img id="playerDownDealerImg" class="d-none dealer-img" title="Djelitelj" src="~/imgs/d-icon.png" />
            </div>
            <span class="game-username">@Model.UserNameDown</span>
            <div id="progressDown" class="countdown-progress-bar countdown-progress-bar-tb d-none">
                <div></div>
            </div>
            <div id="speechBubbleDown" class="speech-bubble speech-bubble-up-down"></div>
        </div>
    </div>
    <div id="handContainer" class="hand-container row">
    </div>
</div>
<table id="scoreTable" class="score-table">
    <tr>
        <th></th>
        <th>MI</th>
        <th>VI</th>
    </tr>
    <tr>
        <td>Zvanja</td>
        <td id="miCalls"></td>
        <td id="viCalls"></td>
    </tr>
    <tr>
        <td>Dijeljenje</td>
        <td id="miPoints"></td>
        <td id="viPoints"></td>
    </tr>
    <tr>
        <td>Trenutna runda</td>
        <td id="miRoundTotal"></td>
        <td id="viRoundTotal"></td>
    </tr>
    <tr class="tr-total-score">
        <td><strong>UKUPNO</strong></td>
        <td id="miTotalScore"></td>
        <td id="viTotalScore"></td>
    </tr>
    <tr>
        <td class="cursor-pointer" onclick="toggleRoundRows()" colspan="3">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="black" class="bi bi-caret-down-fill" viewBox="0 0 16 16">
                <path d="M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z" />
            </svg>
        </td>
    </tr>
</table>